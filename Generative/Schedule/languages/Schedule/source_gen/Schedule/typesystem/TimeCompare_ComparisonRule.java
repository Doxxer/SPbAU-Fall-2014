package Schedule.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.ComparisonRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.typesystem.runtime.IsApplicable2Status;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.smodel.SModelUtil_new;

public class TimeCompare_ComparisonRule extends ComparisonRule_Runtime {
  public TimeCompare_ComparisonRule() {
  }
  public boolean areComparable(SNode node1, SNode node2, IsApplicable2Status status) {
    return Integer.valueOf(SPropertyOperations.getString(node1, "hours")) < Integer.valueOf(SPropertyOperations.getString(node2, "hours"));
  }
  public boolean isWeak() {
    return true;
  }
  public IsApplicableStatus isApplicableFirst(SNode node) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(node.getConcept().getQualifiedName(), this.getApplicableConceptFQName1());
      return new IsApplicableStatus(b, null);
    }
  }
  public IsApplicableStatus isApplicableSecond(SNode node) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(node.getConcept().getQualifiedName(), this.getApplicableConceptFQName2());
      return new IsApplicableStatus(b, null);
    }
  }
  public String getApplicableConceptFQName1() {
    return "Schedule.structure.Time";
  }
  public String getApplicableConceptFQName2() {
    return "Schedule.structure.Time";
  }
}
