/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package ru.spbau.turaev.depgraph.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package ru.spbau.turaev.depgraph.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import ru.spbau.turaev.depgraph.services.MyDslGrammarAccess;

}

@parser::members {
 
 	private MyDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getPersonsAssignment()); }
(rule__Model__PersonsAssignment)*
{ after(grammarAccess.getModelAccess().getPersonsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePerson
entryRulePerson 
:
{ before(grammarAccess.getPersonRule()); }
	 rulePerson
{ after(grammarAccess.getPersonRule()); } 
	 EOF 
;

// Rule Person
rulePerson
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPersonAccess().getGroup()); }
(rule__Person__Group__0)
{ after(grammarAccess.getPersonAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationshipDescription
entryRuleRelationshipDescription 
:
{ before(grammarAccess.getRelationshipDescriptionRule()); }
	 ruleRelationshipDescription
{ after(grammarAccess.getRelationshipDescriptionRule()); } 
	 EOF 
;

// Rule RelationshipDescription
ruleRelationshipDescription
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationshipDescriptionAccess().getGroup()); }
(rule__RelationshipDescription__Group__0)
{ after(grammarAccess.getRelationshipDescriptionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNoRelationships
entryRuleNoRelationships 
:
{ before(grammarAccess.getNoRelationshipsRule()); }
	 ruleNoRelationships
{ after(grammarAccess.getNoRelationshipsRule()); } 
	 EOF 
;

// Rule NoRelationships
ruleNoRelationships
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNoRelationshipsAccess().getRelAssignment()); }
(rule__NoRelationships__RelAssignment)
{ after(grammarAccess.getNoRelationshipsAccess().getRelAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Person__RelsAlternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersonAccess().getRelsRelationshipDescriptionParserRuleCall_2_0_0()); }
	ruleRelationshipDescription
{ after(grammarAccess.getPersonAccess().getRelsRelationshipDescriptionParserRuleCall_2_0_0()); }
)

    |(
{ before(grammarAccess.getPersonAccess().getRelsNoRelationshipsParserRuleCall_2_0_1()); }
	ruleNoRelationships
{ after(grammarAccess.getPersonAccess().getRelsNoRelationshipsParserRuleCall_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Person__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Person__Group__0__Impl
	rule__Person__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Person__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersonAccess().getPersonKeyword_0()); }

	'person' 

{ after(grammarAccess.getPersonAccess().getPersonKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Person__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Person__Group__1__Impl
	rule__Person__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Person__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersonAccess().getNameAssignment_1()); }
(rule__Person__NameAssignment_1)
{ after(grammarAccess.getPersonAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Person__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Person__Group__2__Impl
	rule__Person__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Person__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersonAccess().getRelsAssignment_2()); }
(rule__Person__RelsAssignment_2)
{ after(grammarAccess.getPersonAccess().getRelsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Person__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Person__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Person__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersonAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getPersonAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__RelationshipDescription__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationshipDescription__Group__0__Impl
	rule__RelationshipDescription__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipDescription__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipDescriptionAccess().getIsInRelationshipsWithKeyword_0()); }

	'is in relationships with {' 

{ after(grammarAccess.getRelationshipDescriptionAccess().getIsInRelationshipsWithKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationshipDescription__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationshipDescription__Group__1__Impl
	rule__RelationshipDescription__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipDescription__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipDescriptionAccess().getRelAssignment_1()); }
(rule__RelationshipDescription__RelAssignment_1)
{ after(grammarAccess.getRelationshipDescriptionAccess().getRelAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationshipDescription__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationshipDescription__Group__2__Impl
	rule__RelationshipDescription__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipDescription__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipDescriptionAccess().getGroup_2()); }
(rule__RelationshipDescription__Group_2__0)*
{ after(grammarAccess.getRelationshipDescriptionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationshipDescription__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationshipDescription__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipDescription__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipDescriptionAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getRelationshipDescriptionAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__RelationshipDescription__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationshipDescription__Group_2__0__Impl
	rule__RelationshipDescription__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipDescription__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipDescriptionAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getRelationshipDescriptionAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationshipDescription__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationshipDescription__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipDescription__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipDescriptionAccess().getRelAssignment_2_1()); }
(rule__RelationshipDescription__RelAssignment_2_1)
{ after(grammarAccess.getRelationshipDescriptionAccess().getRelAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__PersonsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getPersonsPersonParserRuleCall_0()); }
	rulePerson{ after(grammarAccess.getModelAccess().getPersonsPersonParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Person__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersonAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getPersonAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Person__RelsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersonAccess().getRelsAlternatives_2_0()); }
(rule__Person__RelsAlternatives_2_0)
{ after(grammarAccess.getPersonAccess().getRelsAlternatives_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipDescription__RelAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipDescriptionAccess().getRelPersonCrossReference_1_0()); }
(
{ before(grammarAccess.getRelationshipDescriptionAccess().getRelPersonIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getRelationshipDescriptionAccess().getRelPersonIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getRelationshipDescriptionAccess().getRelPersonCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationshipDescription__RelAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationshipDescriptionAccess().getRelPersonCrossReference_2_1_0()); }
(
{ before(grammarAccess.getRelationshipDescriptionAccess().getRelPersonIDTerminalRuleCall_2_1_0_1()); }
	RULE_ID{ after(grammarAccess.getRelationshipDescriptionAccess().getRelPersonIDTerminalRuleCall_2_1_0_1()); }
)
{ after(grammarAccess.getRelationshipDescriptionAccess().getRelPersonCrossReference_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NoRelationships__RelAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoRelationshipsAccess().getRelIsAloneKeyword_0()); }
(
{ before(grammarAccess.getNoRelationshipsAccess().getRelIsAloneKeyword_0()); }

	'is alone' 

{ after(grammarAccess.getNoRelationshipsAccess().getRelIsAloneKeyword_0()); }
)

{ after(grammarAccess.getNoRelationshipsAccess().getRelIsAloneKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


