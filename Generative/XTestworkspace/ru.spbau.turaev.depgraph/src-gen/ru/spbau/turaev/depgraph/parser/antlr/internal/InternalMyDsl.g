/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package ru.spbau.turaev.depgraph.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ru.spbau.turaev.depgraph.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ru.spbau.turaev.depgraph.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getPersonsPersonParserRuleCall_0()); 
	    }
		lv_persons_0_0=rulePerson		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"persons",
        		lv_persons_0_0, 
        		"Person");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRulePerson
entryRulePerson returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPersonRule()); }
	 iv_rulePerson=rulePerson 
	 { $current=$iv_rulePerson.current; } 
	 EOF 
;

// Rule Person
rulePerson returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='person' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPersonAccess().getPersonKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPersonAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPersonRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getPersonAccess().getRelsRelationshipDescriptionParserRuleCall_2_0_0()); 
	    }
		lv_rels_2_1=ruleRelationshipDescription		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPersonRule());
	        }
       		set(
       			$current, 
       			"rels",
        		lv_rels_2_1, 
        		"RelationshipDescription");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getPersonAccess().getRelsNoRelationshipsParserRuleCall_2_0_1()); 
	    }
		lv_rels_2_2=ruleNoRelationships		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPersonRule());
	        }
       		set(
       			$current, 
       			"rels",
        		lv_rels_2_2, 
        		"NoRelationships");
	        afterParserOrEnumRuleCall();
	    }

)

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPersonAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleRelationshipDescription
entryRuleRelationshipDescription returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationshipDescriptionRule()); }
	 iv_ruleRelationshipDescription=ruleRelationshipDescription 
	 { $current=$iv_ruleRelationshipDescription.current; } 
	 EOF 
;

// Rule RelationshipDescription
ruleRelationshipDescription returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='is in relationships with {' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRelationshipDescriptionAccess().getIsInRelationshipsWithKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationshipDescriptionRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getRelationshipDescriptionAccess().getRelPersonCrossReference_1_0()); 
	}

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRelationshipDescriptionAccess().getCommaKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationshipDescriptionRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getRelationshipDescriptionAccess().getRelPersonCrossReference_2_1_0()); 
	}

)
))*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRelationshipDescriptionAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleNoRelationships
entryRuleNoRelationships returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNoRelationshipsRule()); }
	 iv_ruleNoRelationships=ruleNoRelationships 
	 { $current=$iv_ruleNoRelationships.current; } 
	 EOF 
;

// Rule NoRelationships
ruleNoRelationships returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_rel_0_0=	'is alone' 
    {
        newLeafNode(lv_rel_0_0, grammarAccess.getNoRelationshipsAccess().getRelIsAloneKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNoRelationshipsRule());
	        }
       		setWithLastConsumed($current, "rel", lv_rel_0_0, "is alone");
	    }

)
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


