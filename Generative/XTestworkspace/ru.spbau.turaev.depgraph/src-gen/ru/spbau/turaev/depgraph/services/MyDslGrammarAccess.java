/*
* generated by Xtext
*/
package ru.spbau.turaev.depgraph.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cPersonsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPersonsPersonParserRuleCall_0 = (RuleCall)cPersonsAssignment.eContents().get(0);
		
		//Model:
		//	persons+=Person*;
		public ParserRule getRule() { return rule; }

		//persons+=Person*
		public Assignment getPersonsAssignment() { return cPersonsAssignment; }

		//Person
		public RuleCall getPersonsPersonParserRuleCall_0() { return cPersonsPersonParserRuleCall_0; }
	}

	public class PersonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Person");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPersonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRelsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cRelsAlternatives_2_0 = (Alternatives)cRelsAssignment_2.eContents().get(0);
		private final RuleCall cRelsRelationshipDescriptionParserRuleCall_2_0_0 = (RuleCall)cRelsAlternatives_2_0.eContents().get(0);
		private final RuleCall cRelsNoRelationshipsParserRuleCall_2_0_1 = (RuleCall)cRelsAlternatives_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Person:
		//	"person" name=ID rels=(RelationshipDescription | NoRelationships) ";";
		public ParserRule getRule() { return rule; }

		//"person" name=ID rels=(RelationshipDescription | NoRelationships) ";"
		public Group getGroup() { return cGroup; }

		//"person"
		public Keyword getPersonKeyword_0() { return cPersonKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//rels=(RelationshipDescription | NoRelationships)
		public Assignment getRelsAssignment_2() { return cRelsAssignment_2; }

		//RelationshipDescription | NoRelationships
		public Alternatives getRelsAlternatives_2_0() { return cRelsAlternatives_2_0; }

		//RelationshipDescription
		public RuleCall getRelsRelationshipDescriptionParserRuleCall_2_0_0() { return cRelsRelationshipDescriptionParserRuleCall_2_0_0; }

		//NoRelationships
		public RuleCall getRelsNoRelationshipsParserRuleCall_2_0_1() { return cRelsNoRelationshipsParserRuleCall_2_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class RelationshipDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationshipDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsInRelationshipsWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRelPersonCrossReference_1_0 = (CrossReference)cRelAssignment_1.eContents().get(0);
		private final RuleCall cRelPersonIDTerminalRuleCall_1_0_1 = (RuleCall)cRelPersonCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRelAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRelPersonCrossReference_2_1_0 = (CrossReference)cRelAssignment_2_1.eContents().get(0);
		private final RuleCall cRelPersonIDTerminalRuleCall_2_1_0_1 = (RuleCall)cRelPersonCrossReference_2_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RelationshipDescription:
		//	"is in relationships with {" rel+=[Person] ("," rel+=[Person])* "}";
		public ParserRule getRule() { return rule; }

		//"is in relationships with {" rel+=[Person] ("," rel+=[Person])* "}"
		public Group getGroup() { return cGroup; }

		//"is in relationships with {"
		public Keyword getIsInRelationshipsWithKeyword_0() { return cIsInRelationshipsWithKeyword_0; }

		//rel+=[Person]
		public Assignment getRelAssignment_1() { return cRelAssignment_1; }

		//[Person]
		public CrossReference getRelPersonCrossReference_1_0() { return cRelPersonCrossReference_1_0; }

		//ID
		public RuleCall getRelPersonIDTerminalRuleCall_1_0_1() { return cRelPersonIDTerminalRuleCall_1_0_1; }

		//("," rel+=[Person])*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//rel+=[Person]
		public Assignment getRelAssignment_2_1() { return cRelAssignment_2_1; }

		//[Person]
		public CrossReference getRelPersonCrossReference_2_1_0() { return cRelPersonCrossReference_2_1_0; }

		//ID
		public RuleCall getRelPersonIDTerminalRuleCall_2_1_0_1() { return cRelPersonIDTerminalRuleCall_2_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class NoRelationshipsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoRelationships");
		private final Assignment cRelAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cRelIsAloneKeyword_0 = (Keyword)cRelAssignment.eContents().get(0);
		
		//NoRelationships:
		//	rel="is alone";
		public ParserRule getRule() { return rule; }

		//rel="is alone"
		public Assignment getRelAssignment() { return cRelAssignment; }

		//"is alone"
		public Keyword getRelIsAloneKeyword_0() { return cRelIsAloneKeyword_0; }
	}
	
	
	private final ModelElements pModel;
	private final PersonElements pPerson;
	private final RelationshipDescriptionElements pRelationshipDescription;
	private final NoRelationshipsElements pNoRelationships;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPerson = new PersonElements();
		this.pRelationshipDescription = new RelationshipDescriptionElements();
		this.pNoRelationships = new NoRelationshipsElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ru.spbau.turaev.depgraph.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	persons+=Person*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Person:
	//	"person" name=ID rels=(RelationshipDescription | NoRelationships) ";";
	public PersonElements getPersonAccess() {
		return pPerson;
	}
	
	public ParserRule getPersonRule() {
		return getPersonAccess().getRule();
	}

	//RelationshipDescription:
	//	"is in relationships with {" rel+=[Person] ("," rel+=[Person])* "}";
	public RelationshipDescriptionElements getRelationshipDescriptionAccess() {
		return pRelationshipDescription;
	}
	
	public ParserRule getRelationshipDescriptionRule() {
		return getRelationshipDescriptionAccess().getRule();
	}

	//NoRelationships:
	//	rel="is alone";
	public NoRelationshipsElements getNoRelationshipsAccess() {
		return pNoRelationships;
	}
	
	public ParserRule getNoRelationshipsRule() {
		return getNoRelationshipsAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
