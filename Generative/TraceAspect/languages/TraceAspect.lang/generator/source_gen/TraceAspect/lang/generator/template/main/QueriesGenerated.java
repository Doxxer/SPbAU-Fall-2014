package TraceAspect.lang.generator.template.main;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.template.MappingScriptContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import TraceAspect.lang.runtime.Util;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

@Generated
public class QueriesGenerated {
  public final boolean NEEDS_OPCONTEXT = false;

  public static void mappingScript_CodeBlock_762104646747627912(final MappingScriptContext _context) {
    ListSequence.fromList(SModelOperations.getRoots(_context.getModel(), "TraceAspect.lang.structure.Tracer")).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getString_def(it, "tracingEntity", null).equals("assignment");
      }
    }).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        Util.traceAssignments(_context.getModel(), SPropertyOperations.getBoolean(SLinkOperations.getTarget(it, "format", true), "showTime"));
      }
    });
    ListSequence.fromList(SModelOperations.getRoots(_context.getModel(), "TraceAspect.lang.structure.Tracer")).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getString_def(it, "tracingEntity", null).equals("calls");
      }
    }).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        Util.traceCalls(_context.getModel(), SPropertyOperations.getBoolean(SLinkOperations.getTarget(it, "format", true), "showTime"));
      }
    });
    ListSequence.fromList(SModelOperations.getRoots(_context.getModel(), "TraceAspect.lang.structure.Tracer")).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getString_def(it, "tracingEntity", null).equals("return");
      }
    }).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        Util.traceReturn(_context.getModel(), SPropertyOperations.getBoolean(SLinkOperations.getTarget(it, "format", true), "showTime"));
      }
    });
  }
}
