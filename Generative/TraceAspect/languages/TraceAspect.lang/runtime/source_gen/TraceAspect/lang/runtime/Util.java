package TraceAspect.lang.runtime;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SModel;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Iterator;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.smodel.SReference;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class Util {
  public static void traceVarRef(SModel model) {
    List<SNode> references = SModelOperations.getNodes(model, "jetbrains.mps.baseLanguage.structure.VariableReference");

    for (SNode ref : ListSequence.fromList(references)) {
      SNode ancestor = SNodeOperations.getAncestor(ref, "jetbrains.mps.baseLanguage.structure.AssignmentExpression", false, false);
      if (ancestor != null && SLinkOperations.getTarget(ancestor, "lValue", true) != ref) {
        // <node> 
      }
    }
  }



  public static void traceAssignments(SModel model, boolean showTime) {
    List<SNode> assignments = SModelOperations.getNodes(model, "jetbrains.mps.baseLanguage.structure.AssignmentExpression");

    {
      Iterator<SNode> expr_it = ListSequence.fromList(assignments).sort(new ISelector<SNode, Integer>() {
        public Integer select(SNode it) {
          return ListSequence.fromList(SNodeOperations.getAncestors(it, null, false)).count();
        }
      }, false).iterator();
      SNode expr_var;
      while (expr_it.hasNext()) {
        expr_var = expr_it.next();
        String name = null;
        if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(expr_var, "lValue", true), "jetbrains.mps.baseLanguage.structure.VariableReference")) {
          name = SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(expr_var, "lValue", true), "jetbrains.mps.baseLanguage.structure.VariableReference"), "variableDeclaration", false), "name");
        } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(expr_var, "lValue", true), "jetbrains.mps.baseLanguage.structure.DotExpression"), "operation", true), "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation")) {
          SNode node = SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(expr_var, "lValue", true), "jetbrains.mps.baseLanguage.structure.DotExpression"), "operation", true), "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation"), "fieldDeclaration", false);
          name = SPropertyOperations.getString(SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.Classifier", false, false), "name") + "." + SPropertyOperations.getString(node, "name");
        }

        SLinkOperations.setTarget(expr_var, "rValue", _quotation_createNode_sd8x_a0d0c0c(name, SLinkOperations.getTarget(expr_var, "rValue", true), Boolean.toString(showTime)), true);
      }
    }
  }



  public static void traceCalls(SModel model, boolean showTime) {
    Iterable<SNode> calls = ListSequence.fromList(SModelOperations.getNodes(model, "jetbrains.mps.baseLanguage.structure.DotExpression")).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it, "operation", true), "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation");
      }
    });

    for (SNode call : Sequence.fromIterable(calls)) {
      SNode instanceMethodDeclaration = SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(call, "operation", true), "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"), "baseMethodDeclaration", false);
      SPropertyOperations.getString(instanceMethodDeclaration, "name");
      SLinkOperations.setTarget(call, "operand", _quotation_createNode_sd8x_a0c0c0e(SLinkOperations.getTarget(call, "operand", true), SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(call, "operand", true), "jetbrains.mps.baseLanguage.structure.VariableReference"), "variableDeclaration", false), "name"), SPropertyOperations.getString(instanceMethodDeclaration, "name"), Boolean.toString(showTime)), true);
    }

    Iterable<SNode> declarations = ListSequence.fromList(SModelOperations.getNodes(model, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration")).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it, "initializer", true), "jetbrains.mps.baseLanguage.structure.GenericNewExpression");
      }
    });

    for (SNode declaration : Sequence.fromIterable(declarations)) {
      SNode ctor = SNodeOperations.as(SLinkOperations.getTarget(declaration, "initializer", true), "jetbrains.mps.baseLanguage.structure.GenericNewExpression");
      SLinkOperations.setTarget(declaration, "initializer", _quotation_createNode_sd8x_a0b0g0e(ctor, SPropertyOperations.getString(declaration, "name"), SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(ctor, "creator", true), "jetbrains.mps.baseLanguage.structure.ClassCreator"), "baseMethodDeclaration", false), "name"), Boolean.toString(showTime)), true);
    }
  }



  public static void traceReturn(SModel model, boolean showTime) {
    List<SNode> bodyes = SModelOperations.getNodes(model, "jetbrains.mps.baseLanguage.structure.StatementList");
    for (SNode body : ListSequence.fromList(bodyes)) {
      List<SNode> bodyStatements = SLinkOperations.getTargets(body, "statement", true);
      String methodName = SPropertyOperations.getString(SNodeOperations.getAncestor(body, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", false, false), "name");

      if (!(SNodeOperations.isInstanceOf(ListSequence.fromList(bodyStatements).last(), "jetbrains.mps.baseLanguage.structure.ReturnStatement"))) {
        ListSequence.fromList(bodyStatements).addElement(_quotation_createNode_sd8x_a0a0a3a1a6(methodName, Boolean.toString(showTime)));
      } else {
        SNode returnStatement = SNodeOperations.as(ListSequence.fromList(bodyStatements).last(), "jetbrains.mps.baseLanguage.structure.ReturnStatement");
        SLinkOperations.setTarget(returnStatement, "expression", _quotation_createNode_sd8x_a0b0a3a1a6(methodName, SLinkOperations.getTarget(returnStatement, "expression", true), Boolean.toString(showTime)), true);
      }
    }
  }

  private static SNode _quotation_createNode_sd8x_a0d0c0c(Object parameter_1, Object parameter_2, Object parameter_3) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodCall", null, null, false);
    quotedNode_4.setReference("classConcept", SReference.create("classConcept", quotedNode_4, facade.createModelReference("r:37995143-823f-45fb-bad3-9603ab3b98d0(TraceAspect.lang.runtime)"), facade.createNodeId("3292382144807380716")));
    quotedNode_4.setReference("baseMethodDeclaration", SReference.create("baseMethodDeclaration", quotedNode_4, facade.createModelReference("r:37995143-823f-45fb-bad3-9603ab3b98d0(TraceAspect.lang.runtime)"), facade.createNodeId("3292382144807390005")));
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringLiteral", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_5, "value", (String) parameter_1);
    quotedNode_4.addChild("actualArgument", quotedNode_5);
    quotedNode_6 = (SNode) parameter_2;
    if (quotedNode_6 != null) {
      quotedNode_4.addChild("actualArgument", HUtil.copyIfNecessary(quotedNode_6));
    }
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringLiteral", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_7, "value", (String) parameter_3);
    quotedNode_4.addChild("actualArgument", quotedNode_7);
    return quotedNode_4;
  }

  private static SNode _quotation_createNode_sd8x_a0c0c0e(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    SNode quotedNode_10 = null;
    SNode quotedNode_11 = null;
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodCall", null, null, false);
    quotedNode_5.setReference("classConcept", SReference.create("classConcept", quotedNode_5, facade.createModelReference("r:37995143-823f-45fb-bad3-9603ab3b98d0(TraceAspect.lang.runtime)"), facade.createNodeId("3292382144807380716")));
    quotedNode_5.setReference("baseMethodDeclaration", SReference.create("baseMethodDeclaration", quotedNode_5, facade.createModelReference("r:37995143-823f-45fb-bad3-9603ab3b98d0(TraceAspect.lang.runtime)"), facade.createNodeId("195158585673673282")));
    quotedNode_6 = (SNode) parameter_1;
    if (quotedNode_6 != null) {
      quotedNode_5.addChild("actualArgument", HUtil.copyIfNecessary(quotedNode_6));
    }
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringLiteral", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_7, "value", (String) parameter_2);
    quotedNode_5.addChild("actualArgument", quotedNode_7);
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringLiteral", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_8, "value", (String) parameter_3);
    quotedNode_5.addChild("actualArgument", quotedNode_8);
    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringLiteral", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_9, "value", (String) parameter_4);
    quotedNode_5.addChild("actualArgument", quotedNode_9);
    return quotedNode_5;
  }

  private static SNode _quotation_createNode_sd8x_a0b0g0e(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodCall", null, null, false);
    quotedNode_5.setReference("baseMethodDeclaration", SReference.create("baseMethodDeclaration", quotedNode_5, facade.createModelReference("r:37995143-823f-45fb-bad3-9603ab3b98d0(TraceAspect.lang.runtime)"), facade.createNodeId("195158585674807567")));
    quotedNode_5.setReference("classConcept", SReference.create("classConcept", quotedNode_5, facade.createModelReference("r:37995143-823f-45fb-bad3-9603ab3b98d0(TraceAspect.lang.runtime)"), facade.createNodeId("3292382144807380716")));
    quotedNode_6 = (SNode) parameter_1;
    if (quotedNode_6 != null) {
      quotedNode_5.addChild("actualArgument", HUtil.copyIfNecessary(quotedNode_6));
    }
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringLiteral", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_7, "value", (String) parameter_2);
    quotedNode_5.addChild("actualArgument", quotedNode_7);
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringLiteral", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_8, "value", (String) parameter_3);
    quotedNode_5.addChild("actualArgument", quotedNode_8);
    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringLiteral", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_9, "value", (String) parameter_4);
    quotedNode_5.addChild("actualArgument", quotedNode_9);
    return quotedNode_5;
  }

  private static SNode _quotation_createNode_sd8x_a0a0a3a1a6(Object parameter_1, Object parameter_2) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, false);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodCall", null, null, false);
    quotedNode_4.setReference("baseMethodDeclaration", SReference.create("baseMethodDeclaration", quotedNode_4, facade.createModelReference("r:37995143-823f-45fb-bad3-9603ab3b98d0(TraceAspect.lang.runtime)"), facade.createNodeId("416578148490036887")));
    quotedNode_4.setReference("classConcept", SReference.create("classConcept", quotedNode_4, facade.createModelReference("r:37995143-823f-45fb-bad3-9603ab3b98d0(TraceAspect.lang.runtime)"), facade.createNodeId("3292382144807380716")));
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringLiteral", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_5, "value", (String) parameter_1);
    quotedNode_4.addChild("actualArgument", quotedNode_5);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringLiteral", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_6, "value", (String) parameter_2);
    quotedNode_4.addChild("actualArgument", quotedNode_6);
    quotedNode_3.addChild("expression", quotedNode_4);
    return quotedNode_3;
  }

  private static SNode _quotation_createNode_sd8x_a0b0a3a1a6(Object parameter_1, Object parameter_2, Object parameter_3) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodCall", null, null, false);
    quotedNode_4.setReference("classConcept", SReference.create("classConcept", quotedNode_4, facade.createModelReference("r:37995143-823f-45fb-bad3-9603ab3b98d0(TraceAspect.lang.runtime)"), facade.createNodeId("3292382144807380716")));
    quotedNode_4.setReference("baseMethodDeclaration", SReference.create("baseMethodDeclaration", quotedNode_4, facade.createModelReference("r:37995143-823f-45fb-bad3-9603ab3b98d0(TraceAspect.lang.runtime)"), facade.createNodeId("2085073781388035711")));
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringLiteral", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_5, "value", (String) parameter_1);
    quotedNode_4.addChild("actualArgument", quotedNode_5);
    quotedNode_6 = (SNode) parameter_2;
    if (quotedNode_6 != null) {
      quotedNode_4.addChild("actualArgument", HUtil.copyIfNecessary(quotedNode_6));
    }
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringLiteral", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_7, "value", (String) parameter_3);
    quotedNode_4.addChild("actualArgument", quotedNode_7);
    return quotedNode_4;
  }
}
